# Auto-generated by asn1ate on 2017-07-27 10:10:36.174979
from pyasn1.type import univ, char, namedtype, namedval, tag, constraint, useful

from service_instance_id import *


class ParameterName(univ.Integer):
    pass


ParameterName.namedValues = namedval.NamedValues(
    ('acquisitionSequenceLength', 201),
    ('apidList', 2),
    ('bitLockRequired', 3),
    ('blockingTimeoutPeriod', 0),
    ('blockingUsage', 1),
    ('bufferSize', 4),
    ('clcwGlobalVcId', 202),
    ('clcwPhysicalChannel', 203),
    ('copCntrFramesRepetition', 300),
    ('deliveryMode', 6),
    ('directiveInvocation', 7),
    ('directiveInvocationOnline', 108),
    ('expectedDirectiveIdentification', 8),
    ('expectedEventInvocationIdentification', 9),
    ('expectedSlduIdentification', 10),
    ('fopSlidingWindow', 11),
    ('fopState', 12),
    ('latencyLimit', 15),
    ('mapList', 16),
    ('mapMuxControl', 17),
    ('mapMuxScheme', 18),
    ('maximumFrameLength', 19),
    ('maximumPacketLength', 20),
    ('maximumSlduLength', 21),
    ('minimumDelayTime', 204),
    ('minReportingCycle', 301),
    ('modulationFrequency', 22),
    ('modulationIndex', 23),
    ('notificationMode', 205),
    ('permittedControlWordTypeSet', 101),
    ('permittedFrameQuality', 302),
    ('permittedGvcidSet', 24),
    ('permittedTcVcidSet', 102),
    ('permittedTransmissionMode', 107),
    ('permittedUpdateModeSet', 103),
    ('plop1IdleSequenceLength', 206),
    ('plopInEffect', 25),
    ('protocolAbortMode', 207),
    ('reportingCycle', 26),
    ('requestedControlWordType', 104),
    ('requestedFrameQuality', 27),
    ('requestedGvcid', 28),
    ('requestedTcVcid', 105),
    ('requestedUpdateMode', 106),
    ('returnTimeoutPeriod', 29),
    ('rfAvailable', 30),
    ('rfAvailableRequired', 31),
    ('segmentHeader', 32),
    ('sequCntrFramesRepetition', 303),
    ('subcarrierToBitRateRatio', 34),
    ('throwEventOperation', 304),
    ('timeoutType', 35),
    ('timerInitial', 36),
    ('transmissionLimit', 37),
    ('transmitterFrameSequenceNumber', 38),
    ('vcMuxControl', 39),
    ('vcMuxScheme', 40),
    ('virtualChannel', 41)
)


class DeliveryMode(univ.Integer):
    pass


DeliveryMode.namedValues = namedval.NamedValues(
    ('rtnTimelyOnline', 0),
    ('rtnCompleteOnline', 1),
    ('rtnOffline', 2),
    ('fwdOnline', 3),
    ('fwdOffline', 4)
)


class ReportingCycle(univ.Integer):
    pass


ReportingCycle.subtypeSpec = constraint.ValueRangeConstraint(2, 600)


class ReportRequestType(univ.Choice):
    pass


ReportRequestType.componentType = namedtype.NamedTypes(
    namedtype.NamedType('immediately', univ.Null().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 0))),
    namedtype.NamedType('periodically', ReportingCycle().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 1))),
    namedtype.NamedType('stop', univ.Null().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 2)))
)


class Diagnostics(univ.Integer):
    pass


Diagnostics.namedValues = namedval.NamedValues(
    ('duplicateInvokeId', 100),
    ('otherReason', 127)
)


class DiagnosticScheduleStatusReport(univ.Choice):
    pass


DiagnosticScheduleStatusReport.componentType = namedtype.NamedTypes(
    namedtype.NamedType('common', Diagnostics().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 0))),
    namedtype.NamedType('specific', univ.Integer(namedValues=namedval.NamedValues(('notSupportedInThisDeliveryMode', 0), ('alreadyStopped', 1), ('invalidReportingCycle', 2))).subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 1)))
)


class Credentials(univ.Choice):
    pass


Credentials.componentType = namedtype.NamedTypes(
    namedtype.NamedType('unused', univ.Null().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 0))),
    namedtype.NamedType('used', univ.OctetString().subtype(subtypeSpec=constraint.ValueSizeConstraint(8, 256)).subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 1)))
)


class IntUnsignedShort(univ.Integer):
    pass


IntUnsignedShort.subtypeSpec = constraint.ValueRangeConstraint(0, 65535)


class InvokeId(IntUnsignedShort):
    pass


class SleScheduleStatusReportReturn(univ.Sequence):
    pass


SleScheduleStatusReportReturn.componentType = namedtype.NamedTypes(
    namedtype.NamedType('performerCredentials', Credentials()),
    namedtype.NamedType('invokeId', InvokeId()),
    namedtype.NamedType('result', univ.Choice(componentType=namedtype.NamedTypes(
        namedtype.NamedType('positiveResult', univ.Null().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 0))),
        namedtype.NamedType('negativeResult', DiagnosticScheduleStatusReport().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 1)))
    ))
    )
)


class DiagnosticRafGet(univ.Choice):
    pass


DiagnosticRafGet.componentType = namedtype.NamedTypes(
    namedtype.NamedType('common', Diagnostics().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 0))),
    namedtype.NamedType('specific', univ.Integer(namedValues=namedval.NamedValues(('unknownParameter', 0))).subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 1)))
)


class ApplicationIdentifier(univ.Integer):
    pass


ApplicationIdentifier.namedValues = namedval.NamedValues(
    ('rtnAllFrames', 0),
    ('rtnInsert', 1),
    ('rtnChFrames', 2),
    ('rtnChFsh', 3),
    ('rtnChOcf', 4),
    ('rtnBitstr', 5),
    ('rtnSpacePkt', 6),
    ('fwdAosSpacePkt', 7),
    ('fwdAosVca', 8),
    ('fwdBitstr', 9),
    ('fwdProtoVcdu', 10),
    ('fwdInsert', 11),
    ('fwdCVcdu', 12),
    ('fwdTcSpacePkt', 13),
    ('fwdTcVca', 14),
    ('fwdTcFrame', 15),
    ('fwdCltu', 16)
)


class SleUnbindReturn(univ.Sequence):
    pass


SleUnbindReturn.componentType = namedtype.NamedTypes(
    namedtype.NamedType('responderCredentials', Credentials()),
    namedtype.NamedType('result', univ.Choice(componentType=namedtype.NamedTypes(
        namedtype.NamedType('positive', univ.Null().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 0)))
    ))
    )
)


class LockStatus(univ.Integer):
    pass


LockStatus.namedValues = namedval.NamedValues(
    ('inLock', 0),
    ('outOfLock', 1),
    ('notInUse', 2),
    ('unknown', 3)
)


class CarrierLockStatus(univ.Integer):
    pass


CarrierLockStatus.namedValues = namedval.NamedValues(
    ('inLock', 0),
    ('outOfLock', 1),
    ('unknown', 3)
)

class SymbolLockStatus(univ.Integer):
    pass


SymbolLockStatus.namedValues = namedval.NamedValues(
    ('inLock', 0),
    ('outOfLock', 1),
    ('unknown', 3)
)


class FrameSyncLockStatus(univ.Integer):
    pass


FrameSyncLockStatus.namedValues = namedval.NamedValues(
    ('inLock', 0),
    ('outOfLock', 1),
    ('unknown', 3)
)


class TimeCCSDS(univ.OctetString):
    pass


TimeCCSDS.subtypeSpec = constraint.ValueSizeConstraint(8, 8)


class TimeCCSDSpico(univ.OctetString):
    pass


TimeCCSDSpico.subtypeSpec = constraint.ValueSizeConstraint(10, 10)


class Time(univ.Choice):
    pass


Time.componentType = namedtype.NamedTypes(
    namedtype.NamedType('ccsdsFormat', TimeCCSDS().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 0))),
    namedtype.NamedType('ccsdsPicoFormat', TimeCCSDSpico().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 1)))
)


class LockStatusReport(univ.Sequence):
    pass


LockStatusReport.componentType = namedtype.NamedTypes(
    namedtype.NamedType('time', Time()),
    namedtype.NamedType('carrierLockStatus', CarrierLockStatus()),
    namedtype.NamedType('subcarrierLockStatus', LockStatus()),
    namedtype.NamedType('symbolSyncLockStatus', SymbolLockStatus())
)


class UnbindReason(univ.Integer):
    pass


UnbindReason.namedValues = namedval.NamedValues(
    ('end', 0),
    ('suspend', 1),
    ('versionNotSupported', 2),
    ('other', 127)
)


class IntPosShort(univ.Integer):
    pass


IntPosShort.subtypeSpec = constraint.ValueRangeConstraint(1, 65535)


class VersionNumber(IntPosShort):
    pass


class BindDiagnostic(univ.Integer):
    pass


BindDiagnostic.namedValues = namedval.NamedValues(
    ('accessDenied', 0),
    ('serviceTypeNotSupported', 1),
    ('versionNotSupported', 2),
    ('noSuchServiceInstance', 3),
    ('alreadyBound', 4),
    ('siNotAccessibleToThisInitiator', 5),
    ('inconsistentServiceType', 6),
    ('invalidTime', 7),
    ('outOfService', 8),
    ('otherReason', 127)
)


class IdentifierString(char.VisibleString):
    pass


class AuthorityIdentifier(IdentifierString):
    pass


class SleBindReturn(univ.Sequence):
    pass


SleBindReturn.componentType = namedtype.NamedTypes(
    namedtype.NamedType('performerCredentials', Credentials()),
    namedtype.NamedType('responderIdentifier', AuthorityIdentifier()),
    namedtype.NamedType('result', univ.Choice(componentType=namedtype.NamedTypes(
        namedtype.NamedType('positive', VersionNumber().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 0))),
        namedtype.NamedType('negative', BindDiagnostic().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 1)))
    )))
)


class RafProductionStatus(univ.Integer):
    pass


RafProductionStatus.namedValues = namedval.NamedValues(
    ('running', 0),
    ('interrupted', 1),
    ('halted', 2)
)


class RafParameterName(univ.Integer):
    pass


RafParameterName.namedValues = namedval.NamedValues(
    ('bufferSize', 4),
    ('deliveryMode', 6),
    ('latencyLimit', 15),
    ('minReportingCycle', 301),
    ('permittedFrameQuality', 302),
    ('reportingCycle', 26),
    ('requestedFrameQuality', 27),
    ('returnTimeoutPeriod', 29),
)


class SleStopInvocation(univ.Sequence):
    pass


SleStopInvocation.componentType = namedtype.NamedTypes(
    namedtype.NamedType('invokerCredentials', Credentials()),
    namedtype.NamedType('invokeId', InvokeId())
)


class IntPosLong(univ.Integer):
    pass


IntPosLong.subtypeSpec = constraint.ValueRangeConstraint(1, 4294967295)


class Notification(univ.Choice):
    pass


Notification.componentType = namedtype.NamedTypes(
    namedtype.NamedType('lossFrameSync', LockStatusReport().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 0))),
    namedtype.NamedType('productionStatusChange', RafProductionStatus().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 1))),
    namedtype.NamedType('excessiveDataBacklog', univ.Null().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 2))),
    namedtype.NamedType('endOfData', univ.Null().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 3)))
)


class ForwardDuStatus(univ.Integer):
    pass


ForwardDuStatus.namedValues = namedval.NamedValues(
    ('radiated', 0),
    ('expired', 1),
    ('interrupted', 2),
    ('acknowledged', 3),
    ('productionStarted', 4),
    ('productionNotStarted', 5),
    ('unsupportedTransmissionMode', 6)
)


class PeerAbortDiagnostic(univ.Integer):
    pass


PeerAbortDiagnostic.namedValues = namedval.NamedValues(
    ('accessDenied', 0),
    ('unexpectedResponderId', 1),
    ('operationalRequirement', 2),
    ('protocolError', 3),
    ('communicationsFailure', 4),
    ('encodingError', 5),
    ('returnTimeout', 6),
    ('endOfServiceProvisionPeriod', 7),
    ('unsolicitedInvokeId', 8),
    ('otherReason', 127)
)


class SlePeerAbort(PeerAbortDiagnostic):
    pass


class SleScheduleStatusReportInvocation(univ.Sequence):
    pass


SleScheduleStatusReportInvocation.componentType = namedtype.NamedTypes(
    namedtype.NamedType('invokerCredentials', Credentials()),
    namedtype.NamedType('invokeId', InvokeId()),
    namedtype.NamedType('reportRequestType', ReportRequestType())
)


class RafGetParameterInvocation(univ.Sequence):
    pass


RafGetParameterInvocation.componentType = namedtype.NamedTypes(
    namedtype.NamedType('invokerCredentials', Credentials()),
    namedtype.NamedType('invokeId', InvokeId()),
    namedtype.NamedType('rafParameter', RafParameterName())
)


class LogicalPortName(IdentifierString):
    pass


class PortId(LogicalPortName):
    pass


class SleBindInvocation(univ.Sequence):
    pass


SleBindInvocation.componentType = namedtype.NamedTypes(
    namedtype.NamedType('invokerCredentials', Credentials()),
    namedtype.NamedType('initiatorIdentifier', AuthorityIdentifier()),
    namedtype.NamedType('responderPortIdentifier', PortId()),
    namedtype.NamedType('serviceType', ApplicationIdentifier()),
    namedtype.NamedType('versionNumber', VersionNumber()),
    namedtype.NamedType('serviceInstanceIdentifier', ServiceInstanceIdentifier())
)


class RequestedFrameQuality(univ.Integer):
    pass


RequestedFrameQuality.namedValues = namedval.NamedValues(
    ('goodFramesOnly', 0),
    ('erredFrameOnly', 1),
    ('allFrames', 2)
)


class ConditionalTime(univ.Choice):
    pass


ConditionalTime.componentType = namedtype.NamedTypes(
    namedtype.NamedType('undefined', univ.Null().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 0))),
    namedtype.NamedType('known', Time().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 1)))
)


class RafStartInvocation(univ.Sequence):
    pass


RafStartInvocation.componentType = namedtype.NamedTypes(
    namedtype.NamedType('invokerCredentials', Credentials()),
    namedtype.NamedType('invokeId', InvokeId()),
    namedtype.NamedType('startTime', ConditionalTime()),
    namedtype.NamedType('stopTime', ConditionalTime()),
    namedtype.NamedType('requestedFrameQuality', RequestedFrameQuality())
)


class SleUnbindInvocation(univ.Sequence):
    pass


SleUnbindInvocation.componentType = namedtype.NamedTypes(
    namedtype.NamedType('invokerCredentials', Credentials()),
    namedtype.NamedType('unbindReason', UnbindReason())
)


class RafUsertoProviderPdu(univ.Choice):
    pass


RafUsertoProviderPdu.componentType = namedtype.NamedTypes(
    namedtype.NamedType('rafBindInvocation', SleBindInvocation().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 100))),
    namedtype.NamedType('rafBindReturn', SleBindReturn().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 101))),
    namedtype.NamedType('rafUnbindInvocation', SleUnbindInvocation().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 102))),
    namedtype.NamedType('rafUnbindReturn', SleUnbindReturn().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 103))),
    namedtype.NamedType('rafStartInvocation', RafStartInvocation().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 0))),
    namedtype.NamedType('rafStopInvocation', SleStopInvocation().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 2))),
    namedtype.NamedType('rafScheduleStatusReportInvocation', SleScheduleStatusReportInvocation().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 4))),
    namedtype.NamedType('rafGetParameterInvocation', RafGetParameterInvocation().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 6))),
    namedtype.NamedType('rafPeerAbortInvocation', SlePeerAbort().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 104)))
)


class SleAcknowledgement(univ.Sequence):
    pass


SleAcknowledgement.componentType = namedtype.NamedTypes(
    namedtype.NamedType('credentials', Credentials()),
    namedtype.NamedType('invokeId', InvokeId()),
    namedtype.NamedType('result', univ.Choice(componentType=namedtype.NamedTypes(
        namedtype.NamedType('positiveResult', univ.Null().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 0))),
        namedtype.NamedType('negativeResult', Diagnostics().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 1)))
    ))
    )
)


class AntennaId(univ.Choice):
    pass


AntennaId.componentType = namedtype.NamedTypes(
    namedtype.NamedType('globalForm', univ.ObjectIdentifier().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 0))),
    namedtype.NamedType('localForm', univ.OctetString().subtype(subtypeSpec=constraint.ValueSizeConstraint(1, 16)).subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 1)))
)


class TimeoutPeriod(univ.Integer):
    pass


TimeoutPeriod.subtypeSpec = constraint.ValueRangeConstraint(1, 600)


class DiagnosticRafStart(univ.Choice):
    pass


DiagnosticRafStart.componentType = namedtype.NamedTypes(
    namedtype.NamedType('common', Diagnostics().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 0))),
    namedtype.NamedType('specific', univ.Integer(namedValues=namedval.NamedValues(('outOfService', 0), ('unableToComply', 1), ('invalidStartTime', 2), ('invalidStopTime', 3), ('missingTimeValue', 4))).subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 1)))
)


class CurrentReportingCycle(univ.Choice):
    pass


CurrentReportingCycle.componentType = namedtype.NamedTypes(
    namedtype.NamedType('periodicReportingOff', univ.Null().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 0))),
    namedtype.NamedType('periodicReportingOn', ReportingCycle().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 1)))
)


class SlduStatusNotification(univ.Integer):
    pass


SlduStatusNotification.namedValues = namedval.NamedValues(
    ('produceNotification', 0),
    ('doNotProduceNotification', 1)
)


class SpaceLinkDataUnit(univ.OctetString):
    pass


SpaceLinkDataUnit.subtypeSpec = constraint.ValueSizeConstraint(1, 65536)


class FrameQuality(univ.Integer):
    pass


FrameQuality.namedValues = namedval.NamedValues(
    ('good', 0),
    ('erred', 1),
    ('undetermined', 2)
)


class RafTransferDataInvocation(univ.Sequence):
    pass


RafTransferDataInvocation.componentType = namedtype.NamedTypes(
    namedtype.NamedType('invokerCredentials', Credentials()),
    namedtype.NamedType('earthReceiveTime', Time()),
    namedtype.NamedType('antennaId', AntennaId()),
    namedtype.NamedType('dataLinkContinuity', univ.Integer().subtype(subtypeSpec=constraint.ValueRangeConstraint(-1, 16777215))),
    namedtype.NamedType('deliveredFrameQuality', FrameQuality()),
    namedtype.NamedType('privateAnnotation', univ.Choice(componentType=namedtype.NamedTypes(
        namedtype.NamedType('null', univ.Null().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 0))),
        namedtype.NamedType('notNull', univ.OctetString().subtype(subtypeSpec=constraint.ValueSizeConstraint(1, 128)).subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 1)))
    ))
    ),
    namedtype.NamedType('data', SpaceLinkDataUnit())
)


class RafSyncNotifyInvocation(univ.Sequence):
    pass


RafSyncNotifyInvocation.componentType = namedtype.NamedTypes(
    namedtype.NamedType('invokerCredentials', Credentials()),
    namedtype.NamedType('notification', Notification())
)


class FrameOrNotification(univ.Choice):
    pass


FrameOrNotification.componentType = namedtype.NamedTypes(
    namedtype.NamedType('annotatedFrame', RafTransferDataInvocation().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 0))),
    namedtype.NamedType('syncNotification', RafSyncNotifyInvocation().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 1)))
)


class RafTransferBuffer(univ.SequenceOf):
    pass


RafTransferBuffer.componentType = FrameOrNotification()


class IntUnsignedLong(univ.Integer):
    pass


IntUnsignedLong.subtypeSpec = constraint.ValueRangeConstraint(0, 4294967295)


class Duration(IntUnsignedLong):
    pass


class RafStartReturn(univ.Sequence):
    pass


RafStartReturn.componentType = namedtype.NamedTypes(
    namedtype.NamedType('performerCredentials', Credentials()),
    namedtype.NamedType('invokeId', InvokeId()),
    namedtype.NamedType('result', univ.Choice(componentType=namedtype.NamedTypes(
        namedtype.NamedType('positiveResult', univ.Null().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 0))),
        namedtype.NamedType('negativeResult', DiagnosticRafStart().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 1)))
    ))
    )
)


class RafStatusReportInvocation(univ.Sequence):
    pass


RafStatusReportInvocation.componentType = namedtype.NamedTypes(
    namedtype.NamedType('invokerCredentials', Credentials()),
    namedtype.NamedType('errorFreeFrameNumber', IntUnsignedLong()),
    namedtype.NamedType('deliveredFrameNumber', IntUnsignedLong()),
    namedtype.NamedType('frameSyncLockStatus', FrameSyncLockStatus()),
    namedtype.NamedType('symbolSyncLockStatus', SymbolLockStatus()),
    namedtype.NamedType('subcarrierLockStatus', LockStatus()),
    namedtype.NamedType('carrierLockStatus', CarrierLockStatus()),
    namedtype.NamedType('productionStatus', RafProductionStatus())
)


class PermittedFrameQualitySet(univ.SetOf):
    pass


PermittedFrameQualitySet.componentType = RequestedFrameQuality()
PermittedFrameQualitySet.subtypeSpec=constraint.ValueSizeConstraint(1, 3)


def _OID(*components):
    output = []
    for x in tuple(components):
        if isinstance(x, univ.ObjectIdentifier):
            output.extend(list(x))
        else:
            output.append(int(x))

    return univ.ObjectIdentifier(output)


rsp = _OID(1, 3, 112, 4, 3, 1, 2, 40)
cltu = _OID(1, 3, 112, 4, 3, 1, 2, 7)
spack = _OID(1, 3, 112, 4, 3, 1, 2, 53)
rcf = _OID(1, 3, 112, 4, 3, 1, 2, 46)
tcva = _OID(1, 3, 112, 4, 3, 1, 2, 16)
rsl_fg = _OID(1, 3, 112, 4, 3, 1, 2, 38)
raf = _OID(1, 3, 112, 4, 3, 1, 2, 22)
fsl_fg = _OID(1, 3, 112, 4, 3, 1, 2, 14)
fsp = _OID(1, 3, 112, 4, 3, 1, 2, 10)
sagr = _OID(1, 3, 112, 4, 3, 1, 2, 52)
rocf = _OID(1, 3, 112, 4, 3, 1, 2, 49)
tcf = _OID(1, 3, 112, 4, 3, 1, 2, 12)
rcfsh = _OID(1, 3, 112, 4, 3, 1, 2, 44)


class ServiceInstanceAttributeElement(univ.Sequence):
    componentType = namedtype.NamedTypes(
        namedtype.NamedType('identifier', univ.ObjectIdentifier()),
        namedtype.NamedType('siAttributeValue', char.VisibleString().subtype(subTypeSpec=constraint.ValueSizeConstraint(1, 256)))
    )


class ServiceInstanceAttribute(univ.SetOf):
    componentType = ServiceInstanceAttributeElement()


class ServiceInstanceIdentifier(univ.SequenceOf):
    componentType = ServiceInstanceAttribute()


class HashInput(univ.Sequence):
    componentType = namedtype.NamedTypes(
        namedtype.NamedType('time', univ.OctetString().subtype(subTypeSpec=constraint.ValueSizeConstraint(8, 8))),
        namedtype.NamedType('randomNumber', univ.Integer().subtype(subTypeSpec=constraint.ValueRangeConstraint(0, 2147483647))),
        namedtype.NamedType('userName', char.VisibleString()),
        namedtype.NamedType('passWord', univ.OctetString())
    )


class ISP1Credentials(univ.Sequence):
    componentType = namedtype.NamedTypes(
        namedtype.NamedType('time', univ.OctetString().subtype(subTypeSpec=constraint.ValueSizeConstraint(8, 8))),
        namedtype.NamedType('randomNumber', univ.Integer().subtype(subTypeSpec=constraint.ValueRangeConstraint(0, 2147483647))),
        namedtype.NamedType('theProtected', univ.OctetString().subtype(subTypeSpec=constraint.ValueSizeConstraint(20, 30)))
    )


# RafGetParameter ::= CHOICE
# { parBufferSize [0] SEQUENCE
 # { parameterName ParameterName (bufferSize)
 # , parameterValue IntPosShort
 # -- bufferSize in number of invocations
 # -- that can be held in buffer
 # }
# , parDeliveryMode [1] SEQUENCE
 # { parameterName ParameterName (deliveryMode)
 # , parameterValue RafDeliveryMode
 # }
# , parLatencyLimit [2] SEQUENCE
 # { parameterName ParameterName (latencyLimit)
 # , parameterValue CHOICE
 # { online [0] IntPosShort
 # -- latencyLimit in seconds
 # , offline [1] NULL
 # }
 # }
# , parMinReportingCycle [7] SEQUENCE
 # { parameterName ParameterName (minReportingCycle)
 # , parameterValue IntPosShort (1 .. 600)
 # }
# , parPermittedFrameQuality [6] SEQUENCE
 # { parameterName ParameterName (permittedFrameQuality)
 # , parameterValue PermittedFrameQualitySet
 # }
# , parReportingCycle [3] SEQUENCE
 # { parameterName ParameterName (reportingCycle)
 # , parameterValue CurrentReportingCycle
 # }
# , parReqFrameQuality [4] SEQUENCE
 # { parameterName ParameterName (requestedFrameQuality)
 # , parameterValue INTEGER
 # { goodFramesOnly (0)
 # , erredFrameOnly (1)
 # , allFrames (2)
 # }
 # }
# , parReturnTimeout [5] SEQUENCE
 # { parameterName ParameterName (returnTimeoutPeriod)
 # , parameterValue TimeoutPeriod
 # }
# } 

# RafDeliveryMode ::= DeliveryMode
# ( rtnTimelyOnline
# | rtnCompleteOnline
# | rtnOffline
# ) 
class RafDeliveryMode(DeliveryMode):
    pass

class RafGetParameter(univ.Choice):
    pass

RafGetParameter.componentType = namedtype.NamedTypes(
    namedtype.NamedType('parBufferSize', univ.Sequence(componentType=namedtype.NamedTypes(
        namedtype.NamedType('parameterName', ParameterName()),
        namedtype.NamedType('parameterValue', IntPosShort())
    )).subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 0))),

    namedtype.NamedType('parDeliveryMode', univ.Sequence(componentType=namedtype.NamedTypes(
        namedtype.NamedType('parameterName', ParameterName()),
        namedtype.NamedType('parameterValue', RafDeliveryMode())
    )).subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 1))),

    namedtype.NamedType('parLatencyLimit', univ.Sequence(componentType=namedtype.NamedTypes(
        namedtype.NamedType('parameterName', ParameterName()),
        namedtype.NamedType('parameterValue', univ.Choice(componentType=namedtype.NamedTypes(
            namedtype.NamedType('online', IntPosShort().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 0))),
            namedtype.NamedType('offline', univ.Null().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 1)))
        )))
    )).subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 2))),

    namedtype.NamedType('parMinReportingCycle', univ.Sequence(componentType=namedtype.NamedTypes(
        namedtype.NamedType('parameterName', ParameterName()),
        namedtype.NamedType('parameterValue', IntPosShort())
    )).subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 7))),

    namedtype.NamedType('parPermittedFrameQuality', univ.Sequence(componentType=namedtype.NamedTypes(
        namedtype.NamedType('parameterName', ParameterName()),
        namedtype.NamedType('parameterValue', PermittedFrameQualitySet())
    )).subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 6))),

    namedtype.NamedType('parReportingCycle', univ.Sequence(componentType=namedtype.NamedTypes(
        namedtype.NamedType('parameterName', ParameterName()),
        namedtype.NamedType('parameterValue', CurrentReportingCycle())
    )).subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 3))),

    namedtype.NamedType('parReqFrameQuality', univ.Sequence(componentType=namedtype.NamedTypes(
        namedtype.NamedType('parameterName', ParameterName()),
        namedtype.NamedType('parameterValue', univ.Integer().subtype(namedValues=namedval.NamedValues(
            ('goodFrameOnly', 0),
            ('erredFrameOnly', 1),
            ('allFrames', 2)
        )))
    )).subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 4))),
    namedtype.NamedType('parReportingCycle', univ.Sequence(componentType=namedtype.NamedTypes(
        namedtype.NamedType('parameterName', ParameterName()),
        namedtype.NamedType('parameterValue', TimeoutPeriod())
    )).subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 5))),
)

# class RafUsertoProviderPdu(univ.Choice):
    # pass


# RafUsertoProviderPdu.componentType = namedtype.NamedTypes(
    # namedtype.NamedType('rafBindInvocation', SleBindInvocation().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 100))),
    # namedtype.NamedType('rafBindReturn', SleBindReturn().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 101))),
    # namedtype.NamedType('rafUnbindInvocation', SleUnbindInvocation().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 102))),
    # namedtype.NamedType('rafUnbindReturn', SleUnbindReturn().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 103))),
    # namedtype.NamedType('rafStartInvocation', RafStartInvocation().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 0))),
    # namedtype.NamedType('rafStopInvocation', SleStopInvocation().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 2))),
    # namedtype.NamedType('rafScheduleStatusReportInvocation', SleScheduleStatusReportInvocation().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 4))),
    # namedtype.NamedType('rafGetParameterInvocation', RafGetParameterInvocation().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 6))),
    # namedtype.NamedType('rafPeerAbortInvocation', SlePeerAbort().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 104)))
# )


class RafGetParameterReturn(univ.Sequence):
    pass

RafGetParameterReturn.componentType = namedtype.NamedTypes(
    namedtype.NamedType('performerCredentials', Credentials()),
    namedtype.NamedType('invokeId', InvokeId()),
    namedtype.NamedType('result', univ.Choice(componentType=namedtype.NamedTypes(
        namedtype.NamedType('positiveResult', RafGetParameter().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 0))),
        namedtype.NamedType('negativeResult', DiagnosticRafGet().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 1)))
    )))
)

class RafProvidertoUserPdu(univ.Choice):
    componentType = namedtype.NamedTypes(
        namedtype.NamedType('rafBindInvocation', SleBindInvocation().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 100))),
        namedtype.NamedType('rafBindReturn', SleBindReturn().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 101))),
        namedtype.NamedType('rafUnbindInvocation', SleUnbindInvocation().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 102))),
        namedtype.NamedType('rafUnbindReturn', SleUnbindReturn().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 103))),
        namedtype.NamedType('rafStartReturn', RafStartReturn().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 1))),
        namedtype.NamedType('rafStopReturn', SleAcknowledgement().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 3))),
        namedtype.NamedType('rafTransferBuffer', RafTransferBuffer().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 8))),
        namedtype.NamedType('rafScheduleStatusReportReturn', SleScheduleStatusReportReturn().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 5))),
        namedtype.NamedType('rafStatusReportInvocation', RafStatusReportInvocation().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 9))),
        namedtype.NamedType('rafGetParameterReturn', RafGetParameterReturn().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatConstructed, 7))),
        namedtype.NamedType('rafPeerAbortInvocation', SlePeerAbort().subtype(implicitTag=tag.Tag(tag.tagClassContext, tag.tagFormatSimple, 104)))
    )
